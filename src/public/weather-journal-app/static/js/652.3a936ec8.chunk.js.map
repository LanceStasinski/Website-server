{"version":3,"file":"static/js/652.3a936ec8.chunk.js","mappings":"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","sources":["components/authentication/Input.tsx","components/authentication/Auth.tsx","components/shared/ErrorModal.tsx","components/shared/Backdrop.tsx","components/shared/Modal.tsx","components/shared/hooks/http-hook.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  LoginField,\r\n  IconPortraitFrame,\r\n  IconPortrait,\r\n  StyledInput,\r\n} from \"../../styles/styles\";\r\n\r\nconst Input: React.FC<{ name: string; image: string; type: string; }> = (\r\n  props\r\n) => {\r\n  const capitalizedName =\r\n    props.name.charAt(0).toUpperCase() + props.name.slice(1);\r\n  return (\r\n    <LoginField>\r\n      <IconPortraitFrame>\r\n        <IconPortrait src={props.image} />\r\n      </IconPortraitFrame>\r\n\r\n      <label htmlFor={props.name} />\r\n      <StyledInput\r\n        id={props.name}\r\n        name={props.name}\r\n        placeholder={capitalizedName}\r\n        type={props.type}\r\n      />\r\n    </LoginField>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { FormEvent, useRef, useState, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport personIcon from \"../../assets/personIcon.png\";\r\nimport lockIcon from \"../../assets/lockIcon.png\";\r\nimport { Card, Form, Title, Button } from \"../../styles/styles\";\r\nimport Input from \"./Input\";\r\nimport ErrorModal from \"../shared/ErrorModal\";\r\nimport { AuthContext } from \"../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../shared/LoadingSpinner\";\r\n\r\nconst LoginCard = styled(Card)`\r\n  position: fixed;\r\n  top: 20vh;\r\n  width: 70%;\r\n  left: 15%;\r\n  padding: 1rem;\r\n  background-color: rgba(256, 256, 256, 0.6);\r\n  box-shadow: none;\r\n  height: 380px;\r\n  animation: slideDown 500ms ease-in forwards;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 40%;\r\n    left: 30%;\r\n  }\r\n\r\n  @keyframes slideDown {\r\n    from {\r\n      transform: translateY(-20rem);\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      transform: translateY(0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font-family: \"Open Sans\", sans-serif;\r\n  color: #999;\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nconst Auth: React.FC = () => {\r\n  const nodeRef = useRef(null);\r\n  const [formError, setFormError] = useState<string | undefined>(undefined);\r\n  const authCtx = useContext(AuthContext);\r\n  const { isLoading, httpError, sendRequest, clearError } = useHttpClient();\r\n\r\n  const loginHandler = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    let error = false;\r\n    const username = document.getElementById(\"username\") as HTMLInputElement;\r\n    const password = document.getElementById(\"password\") as HTMLInputElement;\r\n    if (username.value.length < 1) {\r\n      setFormError(\"Please enter a username.\");\r\n      error = true;\r\n    }\r\n    if (password.value.length < 5) {\r\n      setFormError(\"Please enter a password with at least 5 characters.\");\r\n      error = true;\r\n    }\r\n\r\n    if (!error) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_REST_API}/auth`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            username: username.value,\r\n            password: password.value,\r\n          }),\r\n          {\r\n            \"Content-type\": \"application/json\",\r\n          }\r\n        );\r\n        authCtx.login(\r\n          responseData.userId,\r\n          responseData.token,\r\n          responseData.username,\r\n          responseData.unitPreference,\r\n          responseData.zipCode,\r\n        );\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  const clearFormErrorHandler = () => {\r\n    setFormError(undefined);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal onClear={clearError} error={httpError} />\r\n      <ErrorModal onClear={clearFormErrorHandler} error={formError} />\r\n      <LoginCard ref={nodeRef}>\r\n        <Title>Weather Journal</Title>\r\n        <Form>\r\n          <Input name=\"username\" image={personIcon} type=\"text\" />\r\n          <Input name=\"password\" image={lockIcon} type=\"password\" />\r\n          <Button type=\"button\" onClick={loginHandler}>\r\n            LOGIN\r\n          </Button>\r\n        </Form>\r\n        <StyledP>Login to or signup for your profile.</StyledP>\r\n      </LoginCard>\r\n      {isLoading && <LoadingSpinner />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nimport Modal from \"./Modal\";\r\nimport { ErrorButton } from \"../../styles/styles\";\r\n\r\n\r\n\r\nconst StyledP = styled.p`\r\n  color: #666;\r\n  text-align: center;\r\n`\r\n\r\nconst ErrorModal: React.FC<{\r\n  error: string | undefined;\r\n  onClear: () => void;\r\n}> = (props) => {\r\n  return (\r\n    <Modal\r\n      onCancel={props.onClear}\r\n      header=\"An error occurred!\"\r\n      show={!!props.error}\r\n      footer={<ErrorButton onClick={props.onClear}>Okay</ErrorButton>}\r\n    >\r\n      <StyledP>{props.error}</StyledP>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { StyledBackdrop } from \"../../styles/styles\";\r\n\r\nconst Backdrop: React.FC<{ onClick: () => void }> = (props) => {\r\n  return ReactDOM.createPortal(\r\n    <StyledBackdrop onClick={props.onClick} />,\r\n    document.getElementById(\"backdrop-hook\") as HTMLElement\r\n  );\r\n};\r\n\r\nexport default Backdrop;","import React, { useRef, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport Backdrop from \"./Backdrop\";\r\nimport {\r\n  Card,\r\n  ModalHeading,\r\n  HR,\r\n  Footer,\r\n  ModalWrapper,\r\n} from \"../../styles/styles\";\r\n\r\nconst ModalOverlay = styled(Card)`\r\n  box-shadow: none;\r\n  top: 20vh;\r\n  z-index: 100;\r\n  position: fixed;\r\n  padding: 1rem;\r\n`;\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCancel: () => void;\r\n  header?: string;\r\n  footer?: ReactNode;\r\n}\r\n\r\nconst Modal: React.FC<Props> = (props) => {\r\n  const nodeRef = useRef(null);\r\n  return (\r\n    <React.Fragment>\r\n      {props.show && <Backdrop onClick={props.onCancel} />}\r\n      <CSSTransition\r\n        in={props.show}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={300}\r\n        classNames=\"slide-down\"\r\n        nodeRef={nodeRef}\r\n      >\r\n        <ModalWrapper>\r\n          <ModalOverlay ref={nodeRef}>\r\n            <ModalHeading>{props.header}</ModalHeading>\r\n            <HR />\r\n            {props.children}\r\n            <Footer>{props.footer}</Footer>\r\n          </ModalOverlay>\r\n        </ModalWrapper>\r\n      </CSSTransition>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  const activeHttpRequests = useRef([] as AbortController[]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = undefined) => {\r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequests.current.push(httpAbortCtrl);\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        //cancel any http requests if you navigate away from page\r\n        activeHttpRequests.current = activeHttpRequests.current.filter(\r\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (error: any) {\r\n        setHttpError(error.message);\r\n        setIsLoading(false);\r\n        throw error;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setHttpError(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //abort any current requests before request is made\r\n    return () => {\r\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n  return { isLoading, httpError, sendRequest, clearError };\r\n};"],"names":["props","capitalizedName","name","charAt","toUpperCase","slice","src","image","htmlFor","id","placeholder","type","LoginCard","styled","Card","StyledP","nodeRef","useRef","useState","undefined","formError","setFormError","authCtx","useContext","AuthContext","useHttpClient","isLoading","httpError","sendRequest","clearError","loginHandler","e","preventDefault","error","username","document","getElementById","password","value","length","process","JSON","stringify","responseData","login","userId","token","unitPreference","zipCode","ErrorModal","onClear","ref","personIcon","lockIcon","onClick","LoadingSpinner","onCancel","header","show","footer","ReactDOM","ModalOverlay","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","HR","children","setIsLoading","setHttpError","activeHttpRequests","useCallback","url","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort"],"sourceRoot":""}